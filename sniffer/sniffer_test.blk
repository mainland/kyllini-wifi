-- 
-- Copyright (c) Microsoft Corporation
-- All rights reserved. 
--
-- Licensed under the Apache License, Version 2.0 (the ""License""); you
-- may not use this file except in compliance with the License. You may
-- obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
-- LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR
-- A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
--
-- See the Apache Version 2.0 License for specific language governing
-- permissions and limitations under the License.
--
--
#include "../receiver/receiver.blk"
#include "../transmitter/parseMACHeader.blk"

fun comp convert_to_int8() {
var ai : arr[1] int8;

  repeat {
    x<-takes 8;
    do{
      bits_to_int8(ai, x);
    }
    emits ai;
  }
}

fun comp att() {
var c : complex16;
  repeat {
    (x:complex16)<-take;
    do{
    c.re := x.re/1;
    c.im := x.im/1;
    }
    emit c;
  }
}


-- cca_tufv waits for some idle time before detecting a packet
-- so we supply 1000 zero samples before sending the actual packet
fun comp append_idle() {
  times 1000 {
    emit complex16{re=0; im=0};
  }
  repeat{
    x<-take;
    emit x;
  }
}


{-
let comp main = read[complex16] >>> removeDC() >>> att() >>> 
{
  det<-cca(5000); 
  do{println "Detected at: ", det.noSamples, ", shift: ", det.shift, 
                  ", energy: ", det.energy, ", noise: ", det.noise, ", maxCorr: ", det.maxCorr};
  return()
} >>> write[int]
-}

fun comp print_hdr() {
x <- takes 24*8;
do {parseMACHeader(x)};
emits x;

repeat{
  x<-take;
  emit x;
}
}


fun comp print_hex() {
var a : arr[1] int8;
  repeat {
    x<-take;
    do{
      a[0] := x;
      hexprint_int8(a, 1);
    };
    emit x;
  }
}

let comp main = read[complex16] >>> append_idle() >>> receiver() >>> print_hdr() >>> convert_to_int8() >>> print_hex() >>> write
--let comp main = read[complex16] >>> append_idle() >>> receiver() >>> write
