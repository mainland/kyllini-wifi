-- 
-- Copyright (c) Microsoft Corporation
-- All rights reserved. 
--
-- Licensed under the Apache License, Version 2.0 (the ""License""); you
-- may not use this file except in compliance with the License. You may
-- obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
-- LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR
-- A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
--
-- See the Apache Version 2.0 License for specific language governing
-- permissions and limitations under the License.
--
--
#include "../../const.blk"
#include <externals.blk>

-- Viterbi decoder works with finite buffer sizes (i.e. 96000 bits)
-- But we want to test it with very large data inputs
-- So we make a special version that reinits after 1500B
fun comp VITERBI_INFINITE_NAME(rate:int) {
  var nOutput:int16 := 0;
  var outViterbi:arr[96000] bit; 
  var itercnt:int := 0;
  var cnt : int := 0;

 do { viterbi_brick_init_fast(24000, int16(rate), 256) };

 repeat {

    (svalue_many:arr[INTLOUT] int8) <- takes INTLOUT
    do { cnt := 0; } 
    do { 
       while (cnt < (INTLOUT / 48) && nOutput == 0) {
            nOutput := 
             viterbi_brick_decode_fast(svalue_many[cnt*48,48], outViterbi);

            itercnt := itercnt+1;
            cnt := cnt + 1;
            if (itercnt > 800) then {
              -- println "initializing"
              viterbi_brick_init_fast(24000, int16(rate), 256);
     	      itercnt := 0
            }
       }
    }
    if (nOutput > 0) then emits outViterbi[0,256];
    do { nOutput := 0; }
   }
};



