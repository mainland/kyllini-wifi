-- 
-- Copyright (c) Microsoft Corporation
-- All rights reserved. 
--
-- Licensed under the Apache License, Version 2.0 (the ""License""); you
-- may not use this file except in compliance with the License. You may
-- obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
-- LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR
-- A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
--
-- See the Apache Version 2.0 License for specific language governing
-- permissions and limitations under the License.
--
--

#include "../../const.blk"
#include <externals.blk>

#define INTLOUT 48
#define VITERBI_INFINITE_NAME ViterbiInfinite48
#include "ViterbiInfiniteTemplate.blk"

#define INTLOUT 96
#define VITERBI_INFINITE_NAME ViterbiInfinite96
#include "ViterbiInfiniteTemplate.blk"

#define INTLOUT 192
#define VITERBI_INFINITE_NAME ViterbiInfinite192
#include "ViterbiInfiniteTemplate.blk"

#define INTLOUT 288
#define VITERBI_INFINITE_NAME ViterbiInfinite288
#include "ViterbiInfiniteTemplate.blk"


-- Viterbi decoder works with finite buffer sizes (i.e. 96000 bits)
-- But we want to test it with very large data inputs
-- So we make a special version that reinits after 1500B
fun comp ViterbiInfinite(rate:int, modulation:int) {
  if modulation == M_BPSK  then ViterbiInfinite48(rate)  else 
  if modulation == M_QPSK  then ViterbiInfinite96(rate)  else
  if modulation == M_16QAM then ViterbiInfinite192(rate) else
  -- if modulation == M_64QAM then 
  ViterbiInfinite288(rate) 
}

