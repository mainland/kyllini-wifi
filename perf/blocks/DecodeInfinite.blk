-- 
-- Copyright (c) Microsoft Corporation
-- All rights reserved. 
--
-- Licensed under the Apache License, Version 2.0 (the ""License""); you
-- may not use this file except in compliance with the License. You may
-- obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
-- LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR
-- A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
--
-- See the Apache Version 2.0 License for specific language governing
-- permissions and limitations under the License.
--
--

#include "../../const.blk"
#include "../../transmitter/scramble.blk"
#include "../../receiver/decoding/DemapLimit.blk"
#include "../../receiver/decoding/DemapBPSK.blk"
#include "../../receiver/decoding/DemapQPSK.blk"
#include "../../receiver/decoding/DemapQAM16.blk"
#include "../../receiver/decoding/DemapQAM64.blk"
#include "../../receiver/decoding/DeinterleaveBPSK.blk"
#include "../../receiver/decoding/DeinterleaveQPSK.blk"
#include "../../receiver/decoding/DeinterleaveQAM16.blk"
#include "../../receiver/decoding/DeinterleaveQAM64.blk"
#include "ViterbiInfinite.blk"

-- Viterbi decoder works with finite buffer sizes (i.e. 96000 bits)
-- But we want to test it with very large data inputs
-- So we make a special version that reinits after 1500B
fun comp DecodeInfinite(h : struct HeaderInfo) {
  -- +8 is for CRC (4 bits but byte aligned)
  DemapLimit(0) 
  >>> {if (h.modulation == M_BPSK) then 
          DemapBPSK() >>> DeinterleaveBPSK() 
       else 
          if (h.modulation == M_QPSK) then 
             DemapQPSK() >>> DeinterleaveQPSK() 
          else 
             if (h.modulation == M_16QAM) then 
                DemapQAM16() >>> DeinterleaveQAM16() 
             else 
                DemapQAM64() >>> DeinterleaveQAM64() 
      }
  |>>>| ViterbiInfinite(h.coding,h.modulation) >>> scrambler(default_scrmbl_st)
};
