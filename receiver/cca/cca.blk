-- 
-- Copyright (c) Microsoft Corporation
-- All rights reserved. 
--
-- Licensed under the Apache License, Version 2.0 (the ""License""); you
-- may not use this file except in compliance with the License. You may
-- obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
-- LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR
-- A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
--
-- See the Apache Version 2.0 License for specific language governing
-- permissions and limitations under the License.
--
--
#pragma once 

#include <externals.blk>
#include <conj.blk>
#include <sum.blk>
#include <abs.blk>
#include <floor.blk>
#include "../../const.blk"

fun comp cca() {
  var sample : arr[16] complex16;
  var stsind:int16 := 0;
  var detected:bool := false;

  -- calcAutoCorr related
  var ac_corr: arr[4] complex32;
  var acnormsw : arr[4] int;
  var iAutoCorr : int := 0;


  -- calcEnergy related
  var gesw : arr[4] int;
  var iEnergy : int := 0;


  -- CCA related
  var auto_count : int16 := 0;
  var sync_state : int16 := 0;		-- Bool
  var high_count : int16 := 0;
  var peak_index : int16 := 0;
  var peak_corr : int := 0;
  var notfound : int16 := 1;		-- Bool
  var iterind : int32 := 1;

  var sum_corr:int := 0;
  var ccr:int;
  var x : arr[4] complex16;
  var corr_found: bool;
  var cca_pwr_reading:int;
  var sens_count:int16; 

  -- return param
  var ret : struct CCAParams;



  -- STS
  let (sts_re : arr[64] int16) =
    {312,-900,-92,969,625,969,-92,-900,312,15,-534,-86,0,-86,-534,15,
     312,-900,-92,969,625,969,-92,-900,312,15,-534,-86,0,-86,-534,15,
     312,-900,-92,969,625,969,-92,-900,312,15,-534,-86,0,-86,-534,15,
     312,-900,-92,969,625,969,-92,-900,312,15,-534,-86,0,-86,-534,15} in
 
  let (sts_im : arr[64] int16) = 
    {312,15,-534,-86,0,-86,-534,15,312,-900,-92,969,625,969,-92,-900,
     312,15,-534,-86,0,-86,-534,15,312,-900,-92,969,625,969,-92,-900,
     312,15,-534,-86,0,-86,-534,15,312,-900,-92,969,625,969,-92,-900,
     312,15,-534,-86,0,-86,-534,15,312,-900,-92,969,625,969,-92,-900} in


  fun initSTS() {
    var ret : arr[64] complex16;

    for i in [0, 64] {
      ret[i] := complex16{re=sts_re[i]; im=sts_im[i]};
    };
    return ret
  } in

--  let (STS : arr[64] complex16) = initSTS() in
  var STS : arr[64] complex16 := initSTS() in
 
  -- var STS:arr[64] complex16;
  --   for i in [0, 64] {
  --     STS[i] := complex16{re=sts_re[i]; im=sts_im[i]};
  --   };


  fun calcAutoCorr(x : arr[4] complex16, oldsample : arr[16] complex16) {
    var cr : int;
    var ci : int;
    var xcp:arr[4] complex16;
    var c32:arr[4] complex;

    var ssam:arr[4] complex16;
    var r:complex;

    var ac_norm:int;
    var s:arr[1] complex16;

    var sum_re:int;
    var sum_im:int;

    var re32:arr[4] int32;
    var im32:arr[4] int32;

    var sum_c32:complex;
    var iAutoCorr : int := 0;

    v_shift_right_complex16(xcp,x,2);

    ac_corr[0:2] := ac_corr[1:3];
    v_shift_right_complex16(ssam,oldsample[0:3],2);
    v_shift_right_complex16(xcp,xcp,2);

-- OLD:
--    ac_corr[3] := sum_conj_mulw32(ssam,xcp);
    v_conj_mul_complex16_int32(re32, im32, ssam,xcp);
    ac_corr[3] := complex32{re=v_sum_int32(re32); 
                            im=v_sum_int32(im32)};

    sum_c32 := sumc32(ac_corr);

    ac_norm := abs_int32(sum_c32.re)  + abs_int32(sum_c32.im);

    acnormsw[0:2] := acnormsw[1:3];
    acnormsw[3] := ac_norm;
    

    -- For small arrays a loop can be faster than SIMD
    iAutoCorr := 0;
    for i in [0,length(acnormsw)] {
        iAutoCorr := iAutoCorr + acnormsw[i]
    };

    return(iAutoCorr)

  } in


  fun calcEnergy(x : arr[4] complex16) { 
    var ge : int;
    var xcopy:arr[4] complex16;
    var iEnergy : int := 0;
    var re32:arr[4] int32;
    var im32:arr[4] int32;

    v_shift_right_complex16(xcopy,x,2);
    v_shift_right_complex16(xcopy,xcopy,2);

-- OLD:
--    let tmp = (sum_conj_mulw32(xcopy,xcopy)) in 
--    ge := tmp.re;
    v_conj_mul_complex16_int32(re32, im32, xcopy, xcopy);
    ge := v_sum_int32(re32);
    
    gesw[0:2] := gesw[1:3];
    gesw[3] := ge;    

    -- For small arrays a loop can be faster than SIMD
    iEnergy := 0;
    for i in [0,length(gesw)] {
      iEnergy := iEnergy + gesw[i]
    };
 
    return (iEnergy)

  } in    



  -- We need this function since it can calculate correlation on arbitrary shifts of STS
  -- not only 16-bit aligned, as v_correlate. This will be improved in future.
  fun getCrossCorrelation(j : int, s : arr[16] complex16) { 
      var cr:int;
      var ci:int;

      cr := 0;
      ci := 0;

      for i in [0,length(s)] {
        cr := cr + (int(STS[i+j].re)*int(s[i].re) + int(STS[i+j].im )*int(s[i].im )) ;
        ci := ci + (int(STS[i+j].im)*int(s[i].re) - int(STS[i+j].re )*int(s[i].im ))
      };

     return abs_int32(cr) + abs_int32(ci);
  } in



------ CCA

seq{  
  do {
    sync_state := 0;
  
    for i in [0,length(sample)] {
      sample[i] := complex16{re=0;im=0}
    };

    for i in [0,length(acnormsw)] {
      acnormsw[i] := 0;
      gesw[i] := 0
    };


    iterind := 0
  };


  until detected == true seq{
--    xb <- takes 4;
      x <- takes 4
--    do { println "xb/cca: ", xb; };
    do{
      -- x := xb;

      iterind := iterind + 1;
    
      if (sync_state == 0) then {
        iAutoCorr := calcAutoCorr(x, sample);
        iEnergy := calcEnergy(x);      
        
        sample[0:11] := sample[4:15];
        v_shift_right_complex16(sample[12,4],x[0,4],2);

        if (iEnergy > 500000) && (iAutoCorr >= (iEnergy - iEnergy / 8)) then {

          auto_count := auto_count + 1;

  	  if (auto_count >= 4) then {
            high_count := 0;
            sum_corr := 0;
            peak_corr := 0;
            peak_index := 0;

    	    for j in [0,15] {
              ccr := getCrossCorrelation(j, sample); 

-- Vectorized version currently fails as we cannot do SIMD correlation on arbitrary shift
-- since it fails 16-bit alignment. We need to construct shifted STS tables here, as Sora.
--              let corr = v_correlate(STS[j, 16], sample) in 
--              ccr := abs_int32(corr.re) + abs_int32(corr.im);

      	      if (ccr > peak_corr) then {
                peak_corr := ccr;
	        peak_index := int16(j)
              } ;
      	      sum_corr := sum_corr + ccr
     	    };

            corr_found := (peak_corr > sum_corr / 8)
          };

	  if (corr_found == true) then {
	    sync_state := 1;
            cca_pwr_reading := iEnergy;
            high_count := 0;
            if (peak_index > 3) then {
              high_count := peak_index / 4;
              peak_index := peak_index % 4
            }
          }
        }
        else
        { 
          auto_count := 0  -- iEnergy loop
        }
      } else { 
        high_count := high_count + 1;

        sample[0:11] := sample[4:15];

        v_shift_right_complex16(sample[12,4],x[0,4],2);
 
        ccr := getCrossCorrelation(int32(peak_index), sample); 

        if (high_count % 4 == 0 ) then {
           if (ccr > peak_corr) then {
             peak_corr := ccr
           };

           if (ccr < peak_corr/2) then {
             if (high_count > 8) then {
                -- Correlation found
                detected := true
             }
             else
             {
                sync_state := 0;
                sens_count := 0
             }
           }
        }
      }
    };
      
  };


  do {
    ret.noSamples := (4*(iterind-1));
    ret.shift := peak_index;
    ret.energy := iEnergy;
  };

  return ret;
}
}
