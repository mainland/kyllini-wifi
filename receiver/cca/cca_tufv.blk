-- 
-- Copyright (c) Microsoft Corporation
-- All rights reserved. 
--
-- Licensed under the Apache License, Version 2.0 (the ""License""); you
-- may not use this file except in compliance with the License. You may
-- obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
-- LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR
-- A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
--
-- See the Apache Version 2.0 License for specific language governing
-- permissions and limitations under the License.
--
--
#include <externals.blk> 
#include <v_correlate.blk>
#include <abs.blk>
#include <conj.blk>
#include "../../const.blk"

#define NO_REP           9
#define NO_REP_M_1       8

#define CORR_LEN        16


-- Use this define to debug CCA output after every input read
--#define CCA_TUFV_DEBUG_OUTPUT
-- Uncomment to plot outputs using test_cca
--#define CCA_DEBUG_PLOT

-- Measured to PC in bozidar's office on the 1st floor
-- iEnergy: idle=260, Sora12 sine: 13k, Sora12 pkt: 4k, Sora MSR roof sine: 1k, Sora MSR pkt: 400
-- maxCorr: idle: 16k, Sora12 sine: 400k, Sora12 pkt: 70k, Sora MSR roof sine: 30k, Sora MSR pkt: 22k



let norm_shift = 7 
let no_consec_increases = 4 


-- Same as in transmitter/createPreamble, except that it is at a lower sampling rate
fun createSTSinTime() {
  var sts : arr[64] complex16;
  var sts_time : arr[320] complex16;

  let sts_mod = int16(double(bpsk_mod_11a) * 1.472) 

  -- Reset everything - otherwise we might have an ambiguous preamble
  zero_complex16(sts);

  -- short training symbol
  sts[4]   := complex16{re=-sts_mod; im=-sts_mod};
  sts[8]   := complex16{re=-sts_mod; im=-sts_mod};
  sts[12]  := complex16{re=sts_mod; im=sts_mod};
  sts[16]  := complex16{re=sts_mod; im=sts_mod};
  sts[20]  := complex16{re=sts_mod; im=sts_mod};
  sts[24]  := complex16{re=sts_mod; im=sts_mod};

  sts[40] := complex16{re=sts_mod; im=sts_mod};
  sts[44] := complex16{re=-sts_mod; im=-sts_mod};
  sts[48] := complex16{re=sts_mod; im=sts_mod};
  sts[52] := complex16{re=-sts_mod; im=-sts_mod};
  sts[56] := complex16{re=-sts_mod; im=-sts_mod};
  sts[60] := complex16{re=sts_mod; im=sts_mod};

  sts_time[0, 64] := sora_ifft(sts);
  sts_time[64,64] := sts_time[0,64];
  sts_time[128,32] := sts_time[0,32];

  return sts_time;
}


fun InitCorrPattern() {
  var pattern : arr[CORR_LEN*CORR_LEN] complex16;
  var preamble : arr[64] complex16;


  -- let sts = createSTSinTime()  
  let sts = createSTSinTime()  
  for i in [0, 64] {
    preamble[i] := sts[i];
  };

  v_shift_right_complex16(preamble, preamble, norm_shift);

  -- cyclic shift - stores all possible preamble shifts of length 16 in the pattern
  for i in [0,CORR_LEN] {
    pattern[i*CORR_LEN, CORR_LEN] := preamble[i,CORR_LEN];
  }

  return pattern;
} 



-- Detection using Tufvesson algorithm
-- Tufvesson et al, Time and Frequency Synchronization using PN-Sequence Preambles, VTC 99

fun comp cca(energy_threshold : int32) { 
   var pattern : arr[CORR_LEN*CORR_LEN] complex16;
   var corr : int32;
   var maxCorr : int32;
   var maxInd : int16;   
   var input : arr[CORR_LEN] complex16;
   var mul_hist : arr[CORR_LEN*CORR_LEN] complex32;
   var corr_hist : arr[NO_REP*CORR_LEN] int32;
   var oldOldCorr : int32 := 0;
   var oldCorr : int32 := 0;
   var oldInd : int16 := 0;
   var oldOldInd : int16 := 0;
   var noInc : int16 := 0;
   var detected : bool := false; 
   var iterind : int32 := 0;

   -- calcEnergy related
   var gesw : arr[4] int;
   var iEnergy : int := 0;
   var iNoise : int := 0;
   var initial_idle : bool := false;
   var idle_cnt : int := 0;

   -- return param
   var ret : struct CCAParams;

   -- DEBUG
   var debCorr : int32;
   var debCorr2 : int32;



   fun calcEnergy(x : arr complex16) {
     var ge : int;
     var xcopy:arr[length(x)] complex16;
     var iEnergy : int := 0;
     var re32:arr[length(x)] int32;
     var im32:arr[length(x)] int32;

     v_shift_right_complex16(xcopy,x,2);
     v_shift_right_complex16(xcopy,xcopy,2);

     v_conj_mul_complex16_int32(re32, im32, xcopy, xcopy);
     iEnergy := v_sum_int32(re32);
     return (iEnergy)
   } in    


{
   do {
      pattern := InitCorrPattern();
      zero_int32(corr_hist);
      zero_complex32(mul_hist);
      zero_int32(gesw);
   }

#ifndef CCA_TUFV_DEBUG_OUTPUT
   -- To avoid detecting during the tail of the last received packet
   -- make sure you first wait until the energy has gone down.
   until initial_idle == true {
     x <- takes CORR_LEN;

     do {
       iEnergy := calcEnergy(x);      
       if (iEnergy < energy_threshold) then {
         idle_cnt := idle_cnt + 1;
       } else {
         idle_cnt := 0;
       }
       if (idle_cnt >= 20) then { 
         initial_idle := true;
         iNoise := iEnergy;
         iterind := 0;
       }
       iterind := iterind + 1;
     }
   }
#endif



#ifndef CCA_TUFV_DEBUG_OUTPUT
   until detected == true {
     x <- takes CORR_LEN;

     do {
       v_shift_right_complex16(input, x, norm_shift);

       iEnergy := calcEnergy(x);

       maxCorr := 0;
       for i in [0, CORR_LEN] {
          let corrc = v_correlate(pattern[i*CORR_LEN,CORR_LEN], input) 
          let corrmul = corrc * conj_complex32(mul_hist[i])  
          let corri = (abs_int32(corrmul.re) + abs_int32(corrmul.im))  
          mul_hist[i] := corrc;

          corr_hist[i*NO_REP,NO_REP_M_1] := corr_hist[i*NO_REP+1,NO_REP_M_1];
          corr_hist[i*NO_REP+NO_REP-1] := corri;

          corr :=0;
          for j in [0,NO_REP] {
            corr := corr + corr_hist[i*NO_REP+j];
          }

          if (corr > maxCorr) then {
             maxCorr := corr;
             debCorr := corri;
             maxInd := int16(i);
          }
       }

       -- Here, we should not use the absolute value of energy_threshold and maxCorr
       -- Noise floor can be very different in different environment (indoor vs outdoor)
       -- and it is difficult to set the threshold correctly
       -- Also, there can be packets from other PHYs (802.11b) to create high energy
       -- Instead, we use the ratio of normMaxCorr = maxCorr / iEnergy to decide on detection.
       let normMaxCorr = if (iEnergy == 0) then 0 else maxCorr / iEnergy;

       -- Because of repeating preamble we should have a certain number of consecutive 
       -- increases before declaring the peak - start of a packet
       if (iEnergy > energy_threshold && 
           noInc > no_consec_increases && 
           (oldCorr > maxCorr || oldInd != maxInd) && 
           normMaxCorr > 96) then {
          detected := true;
       }

       if (oldOldCorr < oldCorr && oldCorr < maxCorr && oldOldInd == oldInd && oldInd == maxInd) then {
          noInc := noInc + 1;
       } else {
          noInc := 0;
       }

       oldOldCorr := oldCorr;
       oldCorr := maxCorr;
       oldOldInd := oldInd;
       oldInd := maxInd;

       iterind := iterind + 1;
     }


#else
   -- DEBUG code used to debug every output of correlator

   until detected == true {
     x <- takes CORR_LEN;

     do {
       v_shift_right_complex16(input, x, norm_shift);
       iEnergy := calcEnergy(x);      
       maxCorr := 0;
     }

     for i in [0, CORR_LEN] {
        do{
          let corrc = v_correlate(pattern[i*CORR_LEN,CORR_LEN], input) 
          let corrmul = corrc * conj_complex32(mul_hist[i])  
          -- let corrmul = corrc 
          let corri = (abs_int32(corrmul.re) + abs_int32(corrmul.im))  
          mul_hist[i] := corrc;

          corr_hist[i*NO_REP,NO_REP_M_1] := corr_hist[i*NO_REP+1,NO_REP_M_1];
          corr_hist[i*NO_REP+NO_REP-1] := corri;

          corr :=0;
          for j in [0,NO_REP] {
            corr := corr + corr_hist[i*NO_REP+j];
          }

          if (corr > maxCorr) then {
             maxCorr := corr;
             debCorr := corri;
             maxInd := int16(i);
          }

          debCorr := corri;
          debCorr2 := corr;

       }

#ifdef CCA_DEBUG_PLOT
       emit iEnergy;
#else
       emit debCorr;
--       emit debCorr2;
       emit iEnergy;
       emit maxCorr;
#endif

    }
    do{
       -- Because of repeating preamble we should have a certain number of consecutive 
       -- increases before declaring the peak - start of a packet
       if (iEnergy > energy_threshold && noInc > no_consec_increases && (oldCorr > maxCorr || oldInd != maxInd)) then {
#ifdef CCA_DEBUG_PLOT
-- DEBUG (we ignore detections in debug mode to be able to plot it all)
          detected := false;
#else
          detected := true;
#endif
       }

       if (oldOldCorr < oldCorr && oldCorr < maxCorr && oldOldInd == oldInd && oldInd == maxInd) then {
          noInc := noInc + 1;
       } else {
          noInc := 0;
       }

       oldOldCorr := oldCorr;
       oldCorr := maxCorr;
       oldOldInd := oldInd;
       oldInd := maxInd;

       iterind := iterind + 1;
    }
#endif    



{-
     emit maxCorr;
     emit int32(noInc);
--     emit int32(maxInd);
     emit iEnergy;
-}

   }

  do {
    ret.noSamples := (16*iterind + int(oldInd));
    ret.shift := oldInd;
    ret.energy := iEnergy;
    ret.noise := iNoise;
    ret.maxCorr := maxCorr;
  };

  return ret;
}
}








