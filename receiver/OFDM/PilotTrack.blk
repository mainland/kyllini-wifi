-- 
-- Copyright (c) Microsoft Corporation
-- All rights reserved. 
--
-- Licensed under the Apache License, Version 2.0 (the ""License""); you
-- may not use this file except in compliance with the License. You may
-- obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
-- LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR
-- A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
--
-- See the Apache Version 2.0 License for specific language governing
-- permissions and limitations under the License.
--
--
#pragma once 

#include <externals.blk>


#define PILOT_AVG       8
-- LOG_PILOT_AVG = log2(PILOT_AVG)
#define LOG_PILOT_AVG   3           
-- PILOT_WINDOW_LENGTH = 4 * PILOT_AVG - 1
#define PILOT_WINDOW_LENGTH  31



fun build_coeff(var pcoeffs:arr[64] complex16, ave:int16, delta:int16) {
  var th:int16;

  th := ave - delta * 26;

  for i in [64-26, 26]
  {
     pcoeffs[i] := complex16{re=cos_int16(th);im=-sin_int16(th)};
     th := th + delta
  };
        
  th := th + delta; -- 0 subcarrier, dc
        
  -- subcarrier 1 - 26
  for i in [1,26]
  {
     pcoeffs[i] := complex16{re=cos_int16(th);im=-sin_int16(th)};
     th := th + delta
  }
}



fun comp PilotTrack() { 
  var th:arr[4] int32;
  var symbol_count:int := 127;
  var symbol:arr[64] complex16;
  var re32:arr[64] int;
  var im32:arr[64] int;

  var compCoeffs:arr[64] complex16;
  var sCFO_tracker:int16 := 0;
  var sSFO_tracker:int16 := 0;
  var sCFO_comp:int16 := 0;
  var sSFO_comp:int16 := 0;

  var pilotSgn:arr[128] int := 
        {0,  0,  0, -1, -1, -1,  0, -1, -1, -1, -1,  0,  0, -1,  0, -1, 
        -1,  0,  0, -1,  0,  0, -1,  0,  0,  0,  0,  0,  0, -1,  0,  0, 
         0, -1,  0,  0, -1, -1,  0,  0,  0, -1,  0, -1, -1, -1,  0, -1, 
         0, -1, -1,  0,  0, -1,  0,  0,  0,  0,  0, -1, -1,  0,  0, -1, 
        -1,  0, -1,  0, -1,  0,  0, -1, -1, -1,  0,  0, -1, -1, -1, -1, 
         0, -1, -1,  0, -1,  0,  0,  0,  0, -1,  0, -1,  0, -1,  0, -1, 
        -1, -1, -1, -1,  0, -1,  0,  0, -1,  0, -1,  0,  0,  0, -1, -1, 
         0, -1, -1, -1,  0,  0,  0, -1, -1, -1, -1, -1, -1, -1,  0,  0};

  var rotate_coeffs:arr[64] complex16;


  -- We average over 4 last pilots to compensate for deep fades
  var pilot_hist:arr[4*PILOT_AVG] complex16;
  var cnt : int;


  -- Init
  do {
    cnt := 0;
    zero_complex16(rotate_coeffs);
    zero_complex16(pilot_hist);
    for i in [0,64] {
       compCoeffs[i] := complex16{re=32500;im=0}
    }
  };


  -- NOTE: This is currently only doing phase correction from pilots

  repeat seq{

    (symbol_in:arr[64] complex16) <- takes 64;

    -- Compensate phase shift
     do {
-- BOZIDAR: This is CFO frequency correction code that is not fully debugged
-- so we disable it for the moment
--        v_mul_complex16(symbol,symbol_in,compCoeffs,15);
        symbol := symbol_in;
     };

     var symbol_out:arr[64] complex16;

     let pilotPos = {64-21, 64-7, 7, 21};

     -- Calculate pilots
     let p1 = if (pilotSgn[symbol_count] == -1) then complex16{re=-symbol[pilotPos[0]].re; im=-symbol[pilotPos[0]].im}
              else complex16{re=symbol[pilotPos[0]].re;  im=symbol[pilotPos[0]].im};
     let p2 = if (pilotSgn[symbol_count] == -1) then complex16{re=-symbol[pilotPos[1]].re; im=-symbol[pilotPos[1]].im}
              else complex16{re=symbol[pilotPos[1]].re;  im=symbol[pilotPos[1]].im};
     let p3 = if (pilotSgn[symbol_count] == -1) then complex16{re=-symbol[pilotPos[2]].re; im=-symbol[pilotPos[2]].im}
              else complex16{re=symbol[pilotPos[2]].re;  im=symbol[pilotPos[2]].im};
     let p4 = if (pilotSgn[symbol_count] == -1) then complex16{re=-symbol[pilotPos[3]].re; im=-symbol[pilotPos[3]].im}
              else complex16{re=symbol[pilotPos[3]].re;  im=symbol[pilotPos[3]].im};

     -- Calculate the subsequent phase shift
     do {
#ifndef SORA_COMPAT
       -- Store last 4 values of each pilot
       -- TODO: Convert this into the follwoing, when compiler gets support for parsing it
       -- pilot_hist[0,4*PILOT_AVG-1] := pilot_hist[1,4*PILOT_AVG-1];
       pilot_hist[0,PILOT_WINDOW_LENGTH] := pilot_hist[1,PILOT_WINDOW_LENGTH];

       if (cnt == 0) then {
         -- Populate the first RX pilot for good averaging at the beginning
         for i in [0, PILOT_AVG-1] {
           pilot_hist[i]             := complex16{re=p1.re >> LOG_PILOT_AVG; im=p1.im >> LOG_PILOT_AVG};
           pilot_hist[PILOT_AVG+i]   := complex16{re=p2.re >> LOG_PILOT_AVG; im=p2.im >> LOG_PILOT_AVG};
           pilot_hist[2*PILOT_AVG+i] := complex16{re=p3.re >> LOG_PILOT_AVG; im=p3.im >> LOG_PILOT_AVG};
           pilot_hist[3*PILOT_AVG+i] := complex16{re=p4.re >> LOG_PILOT_AVG; im=p4.im >> LOG_PILOT_AVG};
         }
       }

       pilot_hist[PILOT_AVG-1]   := complex16{re=p1.re >> LOG_PILOT_AVG; im=p1.im >> LOG_PILOT_AVG};
       pilot_hist[2*PILOT_AVG-1] := complex16{re=p2.re >> LOG_PILOT_AVG; im=p2.im >> LOG_PILOT_AVG};
       pilot_hist[3*PILOT_AVG-1] := complex16{re=p3.re >> LOG_PILOT_AVG; im=p3.im >> LOG_PILOT_AVG};
       pilot_hist[4*PILOT_AVG-1] := complex16{re=p4.re >> LOG_PILOT_AVG; im=p4.im >> LOG_PILOT_AVG};

       -- Find averages
       let s1 = v_sum_complex16(pilot_hist[0,PILOT_AVG]) 
       let s2 = v_sum_complex16(pilot_hist[PILOT_AVG,PILOT_AVG]) 
       let s3 = v_sum_complex16(pilot_hist[2*PILOT_AVG,PILOT_AVG]) 
       let s4 = v_sum_complex16(pilot_hist[3*PILOT_AVG,PILOT_AVG]) 

         -- TODO: Currently, CFO correction is disabled as it is not fully debugged
         -- Becaue of frequency offset the first PILOT_AVG pilots cannot use averaging
         -- Once CFO correnction is added, this if should be removed and we should
         -- only use averaged pilots (s1-s4) for correction
       -- if (cnt < PILOT_AVG) then {
       -- DEBUG: It turns out that due to large CFO the old scheme works better for the BladeRF demo
       if (true) then {
         th[0] := int32(atan2_int16( p1.im, p1.re));
         th[1] := int32(atan2_int16( p2.im, p2.re));
         th[2] := int32(atan2_int16( p3.im, p3.re));
         th[3] := int32(atan2_int16( -p4.im, -p4.re));
       } else {
         th[0] := int32(atan2_int16( s1.im, s1.re));
         th[1] := int32(atan2_int16( s2.im, s2.re));
         th[2] := int32(atan2_int16( s3.im, s3.re));
         th[3] := int32(atan2_int16( -s4.im, -s4.re));
       }
#else
       th[0] := int32(atan2_int16( p1.im, p1.re));
       th[1] := int32(atan2_int16( p2.im, p2.re));
       th[2] := int32(atan2_int16( p3.im, p3.re));
       th[3] := int32(atan2_int16( -p4.im, -p4.re));
#endif
       symbol_count := symbol_count + 1;
       if (symbol_count >= 127) then {
          symbol_count := 0
       };

       -- Adjust phase to avoid interpolation errors that
       -- arise from phase wrapping
       for i in [0,3] {
         -- PI = 32768
         if (th[i] - th[i+1] > 32768) then {
           th[i+1] := th[i+1] + 2*32768;
         } else {
           if (th[i+1] - th[i] > 32768) then {
             th[i+1] := th[i+1] - 2*32768;
           }
         }
       }

       let avgTheta32 = (th[0] + th[1] + th[2] + th[3])/4 

       let avgTheta = if avgTheta32 >= 32768 then int16(avgTheta32 - 2*32768)
                      else if avgTheta32 <= -32768 then int16(avgTheta32 + 2*32768)
                      else int16(avgTheta32) 

       -- let delTheta = int16(((th[2] - th[0]) / (21 + 7) + (th[3] - th[1]) / (21 + 7)) >> 1) 
       let delTheta = int16(((th[2] - th[0]) / (64-pilotPos[0] + pilotPos[2]) + 
                             (th[3] - th[1]) / (pilotPos[3] + 64-pilotPos[1])) >> 1) 

       build_coeff(rotate_coeffs, avgTheta, delTheta);

       
       -- Compensate pilots
       zero_complex16(symbol_out);
       v_mul_complex16(symbol_out[0,28], symbol[0,28], rotate_coeffs[0,28],15);
       v_mul_complex16(symbol_out[36,28],symbol[36,28],rotate_coeffs[36,28],15);


       sCFO_tracker := sCFO_tracker + avgTheta >> 2;
       sSFO_tracker := sSFO_tracker + delTheta >> 2;
       sCFO_comp := sCFO_comp + avgTheta + sCFO_tracker;
       sSFO_comp := sSFO_comp + delTheta + sSFO_tracker;

       build_coeff (compCoeffs, sCFO_comp, sSFO_comp )


       cnt := cnt + 1;

       -- DEBUG
{-
       if (cnt >= 1 && cnt <= 800) then 
       {
--         print "cnt: ", cnt, " D: ", pilotSgn[symbol_count-1], " th: ", double(th[0])/32768.0, ", ", 
--               double(th[1])/32768.0, ", ", double(th[2])/32768.0, ", ", double(th[3])/32768.0;
         print "cnt: ", cnt, " D: ", pilotSgn[(symbol_count+126)%127], " th: ", th[0], ", ", 
               th[1], ", ", th[2], ", ", th[3];
         print " avgTheta: ", avgTheta, " delTheta: ", delTheta;
         println " sCFO_comp: ", sCFO_comp, "/", sCFO_tracker, " sSFO_tracker: ", sSFO_comp, "/", sSFO_tracker;
--         println "p1: ", p1, ", s1: ", s1;
         

--         println "cnt: ", cnt, ", ", symbol[pilotPos[0]], symbol[pilotPos[1]], symbol[pilotPos[2]], symbol[pilotPos[3]];

         -- println rotate_coeffs;
       }
-}

     };

     emits symbol_out
   }

}
