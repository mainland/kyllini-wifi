-- 
-- Copyright (c) Microsoft Corporation
-- All rights reserved. 
--
-- Licensed under the Apache License, Version 2.0 (the ""License""); you
-- may not use this file except in compliance with the License. You may
-- obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
-- LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR
-- A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
--
-- See the Apache Version 2.0 License for specific language governing
-- permissions and limitations under the License.
--
--
#pragma once 

#include "../../const.blk"
#include <externals.blk>


fun comp Viterbi(rate:int, len:int) { 
  var nOutput:int16;
  var outViterbi:arr[96000] bit; 

-- TODO: This calls free and malloc. 
-- When receiving multiple packets (MAC, sniffer), 
-- we probably want to allocate
-- a large buffer at the start and never all it again 
  do {viterbi_brick_init_fast(len, int16(rate), 256)};

 repeat {

    (svalue:arr[48] int8) <- takes 48;
   
     do{
       nOutput := viterbi_brick_decode_fast(svalue, outViterbi);
     };

     -- We know that the output of Viterbi is in bytes
     -- So we can help vectorization here
     for i in [0, nOutput/8] {
       emits outViterbi[i*8,8];
     }

   }

}
