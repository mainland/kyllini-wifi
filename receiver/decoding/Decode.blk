-- 
-- Copyright (c) Microsoft Corporation
-- All rights reserved. 
--
-- Licensed under the Apache License, Version 2.0 (the ""License""); you
-- may not use this file except in compliance with the License. You may
-- obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
-- LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR
-- A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
--
-- See the Apache Version 2.0 License for specific language governing
-- permissions and limitations under the License.
--
--
#pragma once 

#include "../../const.blk"
#include "../../transmitter/scramble.blk"
#include "DemapLimit.blk"
#include "DemapBPSK.blk"
#include "DemapQPSK.blk"
#include "DemapQAM16.blk"
#include "DemapQAM64.blk"
#include "DeinterleaveBPSK.blk"
#include "DeinterleaveQPSK.blk"
#include "DeinterleaveQAM16.blk"
#include "DeinterleaveQAM64.blk"
#include "Viterbi.blk"


fun comp descrambler() {
  -- WiFi RX learns the scrambler's state from SERVICE field
  -- (which is zero so it containts the scrambler's state itself)
  -- We cheat a bit to simplify the code by learning from
  -- the reserved part of SERVICE field. 
  state <- takes 16;
  scrambler(state[9,7])
}

fun comp Decode(h : struct HeaderInfo) {
  DemapLimit(0) 
  >>> {if (h.modulation == M_BPSK) then 
          DemapBPSK() >>> DeinterleaveBPSK() 
       else 
          if (h.modulation == M_QPSK) then 
             DemapQPSK() >>> DeinterleaveQPSK() 
          else 
             if (h.modulation == M_16QAM) then 
                DemapQAM16() >>> DeinterleaveQAM16() 
             else 
                DemapQAM64() >>> DeinterleaveQAM64() 
      }
  -- +2B here is to include 16-bit SERVICE field at the beggining of DATA
  >>> Viterbi(h.coding, h.len+2) >>> descrambler()
}
