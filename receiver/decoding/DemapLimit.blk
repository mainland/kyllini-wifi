-- 
-- Copyright (c) Microsoft Corporation
-- All rights reserved. 
--
-- Licensed under the Apache License, Version 2.0 (the ""License""); you
-- may not use this file except in compliance with the License. You may
-- obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
-- LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR
-- A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
--
-- See the Apache Version 2.0 License for specific language governing
-- permissions and limitations under the License.
--
--
#pragma once 

fun comp DemapLimit(shr:int) {
  var symbol : arr[4] complex16;

  repeat seq {
    
     (x:arr[4] complex16) <- takes 4;

     var symbol_out : arr[4] complex16;
    
     do {
       
       v_shift_right_complex16(symbol, x, shr);

       for i in [0,4] {
         let s = symbol[i] in 
         let sre = s.re in 
         let sim = s.im in 


         let re = if (sre < -128) then -128
         else
           if (sre > 127) then 127
           else int16(sre)
         in 

         let im = if (sim < -128) then -128
         else
           if (sim > 127) then 127
           else int16(sim)
         in 

         -- Convert to unsigned for lookup tables
         let ure = if (re < 0) then (256 + re) else re in 
         let uim = if (im < 0) then (256 + im) else im in 

         symbol_out[i] := complex16{re=ure;im=uim}
       }
     };

     emits symbol_out
  }
}
