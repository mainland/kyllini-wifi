-- 
-- Copyright (c) Microsoft Corporation
-- All rights reserved. 
--
-- Licensed under the Apache License, Version 2.0 (the ""License""); you
-- may not use this file except in compliance with the License. You may
-- obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
-- LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR
-- A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
--
-- See the Apache Version 2.0 License for specific language governing
-- permissions and limitations under the License.
--
--

#include <bits.blk>
#include "../receiver/receiver.blk"
#include "../transmitter/transmitter.blk"


fun comp encdec_atten(c:int16) {
  repeat seq {
    (x:complex16) <-take;
    let cre = x.re in 
    let cim = x.im in 
    let dre = cre/c in 
    let dim = cim/c in 
    emit complex16{re=dre;im=dim}
  }
}


fun comp dummy() {
  repeat{
    (x:bit) <-take;
    emit complex16{re=0; im=0}
  }
} 

fun comp convert_to_bits() {
var ai : arr[1] int8;
var ab : arr[8] bit;

  repeat {
    x<-take;
    do{
      ai[0] := x;
      int8_to_bits(ab, ai);
    }
    emits ab;
  }
}

fun comp convert_to_int8() {
var ai : arr[1] int8;

  repeat {
    x<-takes 8;
    do{
      bits_to_int8(ai, x);
    }
    emits ai;
  }
}


-- Test the entire TX/RX at the bit level
let comp main = read[int8] >>> convert_to_bits() 
          >>> { transform_w_header()
                ; dummy()                   -- This is here just to make it a computer
              }
          >>> encdec_atten(16*5) 
          >>> {(t:bool) <- receiveBits() ; return ()}
          >>> convert_to_int8() >>> write




