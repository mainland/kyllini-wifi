-- 
-- Copyright (c) Microsoft Corporation
-- All rights reserved. 
--
-- Licensed under the Apache License, Version 2.0 (the ""License""); you
-- may not use this file except in compliance with the License. You may
-- obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
-- LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR
-- A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
--
-- See the Apache Version 2.0 License for specific language governing
-- permissions and limitations under the License.
--
--
#pragma once 


-- This is a default initial scrambler's state for tests
-- In a real MAC the initial state should be selected
-- pseudorandomly for each re-transmission
let (default_scrmbl_st: arr[7] bit) = {'1,'0,'1,'1,'1,'0,'1}; 

fun comp scrambler(init_scrmbl_st: arr[7] bit) {
var scrmbl_st: arr[7] bit := init_scrmbl_st; 
var y:bit;
  
  repeat [8,8] seq {
    x <- take;
    
    var tmp : bit;
    do{
      tmp := (scrmbl_st[3] ^ scrmbl_st[0]);
      scrmbl_st[0:5] := scrmbl_st[1:6];
      scrmbl_st[6] := tmp;
    }; 

    emit (x^tmp)
  }
}


