-- 
-- Copyright (c) Microsoft Corporation
-- All rights reserved. 
--
-- Licensed under the Apache License, Version 2.0 (the ""License""); you
-- may not use this file except in compliance with the License. You may
-- obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
-- LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR
-- A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
--
-- See the Apache Version 2.0 License for specific language governing
-- permissions and limitations under the License.
--
--

-- NOTE: This should not have pragma once as it is included multiple times
--#pragma once

#include <bits.blk>

-- Used with macros to create a simple template structure

-- len - packet length in bytes
fun comp [CRC_X_WIDTH, CRC_VEC] CRC_NAME (len : int, pad : bool) {
var crc_state:arr[CRC_S_WIDTH] bit := 
    {'1,'1,'1,'1,'1,'1,'1,'1,'1,'1,'1,'1,'1,'1,'1,'1,
     '1,'1,'1,'1,'1,'1,'1,'1,'1,'1,'1,'1,'1,'1,'1,'1};

  -- Prepend SERVICE bits (only at the transmitter)
  if (pad) then {
    emits {'0,'0,'0,'0,'0,'0,'0,'0,'0,'0,'0,'0,'0,'0,'0,'0};
  }

  times len seq {
    (x:arr[CRC_X_WIDTH] bit) <- takes CRC_X_WIDTH;
    do {
      update_crc_generic(x, base32, crc_state)
    };
    emits x;
  }
  do {
    -- CRC-32 requires flipping all bits at the end
    for i in [0, CRC_S_WIDTH/8] {
      for j in [0, 8] {
        crc_state[i*8+j] := ~crc_state[i*8+j];
      }
    }
  };
 
  -- Only add CRC and padding at the transmitter
  if (pad) then {
    emits crc_state;

    -- Add padding so that the length of output is a multiple of CRC_VEC in bits
    let len_so_far = 16 + len * 8 + 32;
    let len_so_far_plus_tail = len_so_far + 6;
    let len_mod = if len_so_far_plus_tail % CRC_VEC > 0 then 1 else 0;
    let final_len = ((len_so_far_plus_tail / CRC_VEC) + len_mod) * CRC_VEC;

    -- Padded length is always modulo 8 (since OFDM symbol carries 48 data symbols)
    times ((final_len - len_so_far)/8) emits {'0,'0,'0,'0,'0,'0,'0,'0};
  }

  return crc_state;
}
