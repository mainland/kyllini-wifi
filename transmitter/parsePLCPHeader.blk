-- 
-- Copyright (c) Microsoft Corporation
-- All rights reserved. 
--
-- Licensed under the Apache License, Version 2.0 (the ""License""); you
-- may not use this file except in compliance with the License. You may
-- obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
-- LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR
-- A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
--
-- See the Apache Version 2.0 License for specific language governing
-- permissions and limitations under the License.
--
--
#pragma once 

#include <externals.blk>
#include "../const.blk"


fun printHeader(h : struct HeaderInfo) {
  print "Header - modulation: ";
  if (h.modulation == M_BPSK) then {
    print "BPSK";
  } else { if (h.modulation == M_QPSK) then {
    print "M_QPSK";
  } else { if (h.modulation == M_16QAM) then {
    print "16QAM";
  } else { 
    print "64QAM";
  } } }
  print ", coding: ";
  if (h.coding == CR_12) then {
    print "1/2";
  } else { if (h.coding == CR_23) then {
    print "2/3";
  } else { 
    print "3/4";
  } } 
  println ", length: ", h.len, " B";
}


fun createPLCPHeader(h:struct HeaderInfo) {
var hdata:arr[24] bit;
var ai : arr[2] int8;
var ab : arr[16] bit;
var p : bit;

  -- Rate
  if h.modulation == M_BPSK && h.coding == CR_12 then {
    hdata[0,4] := {'1, '1, '0, '1};
  } else {
    if h.modulation == M_BPSK && h.coding == CR_34 then {
       hdata[0,4] := {'1, '1, '1, '1};
    } else {
      if h.modulation == M_QPSK && h.coding == CR_12 then {
         hdata[0,4] := {'0, '1, '0, '1};
      } else {
        if h.modulation == M_QPSK && h.coding == CR_34 then {
           hdata[0,4] := {'0, '1, '1, '1};
        } else {
          if h.modulation == M_16QAM && h.coding == CR_12 then {
             hdata[0,4] := {'1, '0, '0, '1};
          } else {
            if h.modulation == M_16QAM && h.coding == CR_34 then {
               hdata[0,4] := {'1, '0, '1, '1}; 
            } else {
              if h.modulation == M_64QAM && h.coding == CR_23 then {
                 hdata[0,4] := {'0, '0, '0, '1};
              } else {
                if h.modulation == M_64QAM && h.coding == CR_34 then {
                   hdata[0,4] := {'0, '0, '1, '1};
                } else {
                   -- Default: BPSK, 1/2
                   hdata[0,4] := {'1, '1, '0, '1};
                }
              }
            }
          }
        }           
      }
    }
  }

  -- Reserved
  hdata[4] := '0;

  -- Length
  ai[0] := int8(h.len % 256);
  ai[1] := int8(h.len / 256);
  int8_to_bits(ab, ai); 
  hdata[5, 12] := ab[0, 12];

  -- Padding
  hdata[17,7] := {'0, '0, '0, '0, '0, '0, '0};

  -- Calculate header's parity
  p := '0;
  for i in [0, 3] {
    let a = hdata[i*8, 8];
    for j in [0, 8] {
      p := p ^ a[j];
    }
  }
  hdata[17] := hdata[17] ^ p;

  return hdata;
}




fun parsePLCPHeader(hdata:arr[24] bit) {
var b:int;
var h:struct HeaderInfo;
var p : bit;
    
     if hdata[0] == '1 && hdata[1] == '1 && hdata[2] == '0 && hdata[3] == '1 then { -- 1
       h.modulation := M_BPSK; h.coding := CR_12
     } else {
       if hdata[0] == '1 && hdata[1] == '1 && hdata[2] == '1 && hdata[3] == '1 then { -- 2
         h.modulation := M_BPSK; h.coding := CR_34
       } else {
          if hdata[0] == '0 && hdata[1] == '1 && hdata[2] == '0 && hdata[3] == '1 then { --3
            h.modulation := M_QPSK; h.coding := CR_12
          } else {
               if hdata[0] == '0 && hdata[1] == '1 && hdata[2] == '1 && hdata[3] == '1 then { -- 4
                 h.modulation := M_QPSK; h.coding := CR_34
               } else {
                  if hdata[0] == '1 && hdata[1] == '0 && hdata[2] == '0 && hdata[3] == '1 then { -- 5
                    h.modulation := M_16QAM; h.coding := CR_12
                  } else {
                     if hdata[0] == '1 && hdata[1] == '0 && hdata[2] == '1 && hdata[3] == '1 then { -- 6
                       h.modulation := M_16QAM; h.coding := CR_34
                     } else {
                       if hdata[0] == '0 && hdata[1] == '0 && hdata[2] == '0 && hdata[3] == '1 then { -- 7
                         h.modulation := M_64QAM; h.coding := CR_23
                       } else {
                         if hdata[0] == '0 && hdata[1] == '0 && hdata[2] == '1 && hdata[3] == '1 then { -- 8
                           h.modulation := M_64QAM; h.coding := CR_34
                         } else {
                            h.modulation := M_BPSK; h.coding := CR_12
                         }
                       }
                     }
                  }
               }           
            }
       }
     }
    


     b := 1;
     h.len := 0;
     for j in [5,12] {
       if hdata[j] == '1 then {
      	  h.len := h.len + b
       };
       b := 2*b
     };

     h.err := false;

     -- Sanity check - no packet larger than 2048B
     if (h.len > 2048) then {
       h.err := true;
       h.len := 2048;
     }

     -- Check header's parity
     p := '0;
     for i in [0, 3] {
       let a = hdata[i*8, 8];
       for j in [0, 8] {
         p := p ^ a[j];
       }
     }

     if (p != '0) then {
       h.err := true;
       -- Don't print wrong packets
       -- println "Header parity check failed!";
     }

     -- Check header's tail
     p := '0;
     let a = hdata[16, 8];
     for j in [2, 6] {
         p := p | a[j];
     }
     if (p != '0) then {
       h.err := true;
       -- Don't print wrong packets
       -- println "Header tail non-zero!";
     }

#ifndef FAST
     if (not h.err) then {
       printHeader(h);
       println "Header bits: ", hdata
     }
#endif
      
  return h;
}


fun comp emitHeader() {
  seq{
    (x : arr[24] bit) <- takes 24;
    emits x;
    return parsePLCPHeader(x)
  }
}
