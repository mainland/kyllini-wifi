-- 
-- Copyright (c) Microsoft Corporation
-- All rights reserved. 
--
-- Licensed under the Apache License, Version 2.0 (the ""License""); you
-- may not use this file except in compliance with the License. You may
-- obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
-- LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR
-- A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
--
-- See the Apache Version 2.0 License for specific language governing
-- permissions and limitations under the License.
--
--
#pragma once 

#include <externals.blk>


#ifdef SHORT_FFT
  -- This is used to create standard output, to be verified against specs
  #define FFT_SIZE        64
  #define CP_SIZE         16
#else
  -- This is used to create oversampled output, to be transmitted at 40 MHz
  #define FFT_SIZE        128
  #define CP_SIZE         32
#endif

fun comp ifft() {
   var symbol:arr[FFT_SIZE] complex16;
   var fftdata:arr[FFT_SIZE+CP_SIZE] complex16;

   do {
     zero_complex16(symbol);
   }

   repeat seq {
     (s:arr[64] complex16) <- takes 64;
     
     do {
        symbol[FFT_SIZE-32,32] := s[0,32];
        symbol[0,32] := s[32,32];
        fftdata[CP_SIZE,FFT_SIZE] := sora_ifft(symbol);
        -- Add CP
        fftdata[0,CP_SIZE] := fftdata[FFT_SIZE,CP_SIZE];
     }

     emits fftdata;
   }
  
}

