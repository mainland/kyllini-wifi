-- 
-- Copyright (c) Microsoft Corporation
-- All rights reserved. 
--
-- Licensed under the Apache License, Version 2.0 (the ""License""); you
-- may not use this file except in compliance with the License. You may
-- obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
-- LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR
-- A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
--
-- See the Apache Version 2.0 License for specific language governing
-- permissions and limitations under the License.
--
--
#pragma once 

-- Taken from preamble11a.hpp

let sts_mod = int16(double(bpsk_mod_11a) * 1.472) 
let lts_mod = bpsk_mod_11a 


#ifdef SHORT_FFT
  -- This is used to create standard output, to be verified against specs
  #define FFT_SIZE        64
  #define CP_SIZE         16
#else
  -- This is used to create oversampled output, to be transmitted at 40 MHz
  #define FFT_SIZE        128
  #define CP_SIZE         32
#endif


fun createSTSinTime() {
  var sts : arr[FFT_SIZE] complex16;
  var sts_time : arr[2*(FFT_SIZE+CP_SIZE)] complex16;

  -- Reset everything - otherwise we might have an ambiguous preamble
  zero_complex16(sts);

  -- short training symbol
  zero_complex16(sts);

  sts[4]   := complex16{re=-sts_mod; im=-sts_mod};
  sts[8]   := complex16{re=-sts_mod; im=-sts_mod};
  sts[12]  := complex16{re=sts_mod; im=sts_mod};
  sts[16]  := complex16{re=sts_mod; im=sts_mod};
  sts[20]  := complex16{re=sts_mod; im=sts_mod};
  sts[24]  := complex16{re=sts_mod; im=sts_mod};

  sts[FFT_SIZE-32+8]  := complex16{re=sts_mod; im=sts_mod};
  sts[FFT_SIZE-32+12] := complex16{re=-sts_mod; im=-sts_mod};
  sts[FFT_SIZE-32+16] := complex16{re=sts_mod; im=sts_mod};
  sts[FFT_SIZE-32+20] := complex16{re=-sts_mod; im=-sts_mod};
  sts[FFT_SIZE-32+24] := complex16{re=-sts_mod; im=-sts_mod};
  sts[FFT_SIZE-32+28] := complex16{re=sts_mod; im=sts_mod};

  sts_time[0,FFT_SIZE] := sora_ifft(sts);
  sts_time[FFT_SIZE,FFT_SIZE] := sts_time[0,FFT_SIZE];
  sts_time[2*FFT_SIZE,2*CP_SIZE] := sts_time[0,2*CP_SIZE];

  return sts_time;
} 


fun createLTSinTime() {
  var lts : arr[FFT_SIZE] complex16;
  var lts_time : arr[2*(FFT_SIZE+CP_SIZE)] complex16;
  var LTS_Positive_table : arr [64] int16 := {
      0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 
      1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 
      1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1
  };

  zero_complex16(lts);


  -- Reset everything - otherwise we might have an ambiguous preamble
  zero_complex16(lts);

  -- (i=1; i<=26; i++ )
  for i in [1,26] {
     if (LTS_Positive_table[i] > 0) then {
        lts[i] := complex16{re=lts_mod;im=0};
     } else {
        lts[i] := complex16{re=-lts_mod;im=0};
     }
  }

  -- (i=64-26; i<64; i++ )
  for i in [(64-26),26] {
     if (LTS_Positive_table[i] > 0) then {
        lts[i+FFT_SIZE-64] := complex16{re=lts_mod;im=0};
     } else {
        lts[i+FFT_SIZE-64] := complex16{re=-lts_mod;im=0};
     }
  }

  lts_time[2*CP_SIZE,FFT_SIZE] := sora_ifft(lts);
  lts_time[2*CP_SIZE+FFT_SIZE,FFT_SIZE] := lts_time[2*CP_SIZE,FFT_SIZE];
  lts_time[0,2*CP_SIZE] := lts_time[2*FFT_SIZE,2*CP_SIZE];

  return lts_time;
}






