-- 
-- Copyright (c) Microsoft Corporation
-- All rights reserved. 
--
-- Licensed under the Apache License, Version 2.0 (the ""License""); you
-- may not use this file except in compliance with the License. You may
-- obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
-- LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR
-- A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
--
-- See the Apache Version 2.0 License for specific language governing
-- permissions and limitations under the License.
--
--

-- Simple function to parse 802.11 MAC header, for debugging purposes

#include <externals.blk>


fun printMACHeaderType(type : int8, subtype : int8)
{
  -- To be added: https://supportforums.cisco.com/document/52391/80211-frames-starter-guide-learn-wireless-sniffer-traces
  if type == 1 && subtype == 8 then {
    print "Block ACK Req";
  } else { 
    if type == 1 && subtype == 9 then {
      print "Block ACK";
    } else { 
      if type == 1 && subtype == 10 then {
        print "PS-Poll";
      } else { 
        if type == 1 && subtype == 11 then {
          print "RTS";
        } else { 
          if type == 1 && subtype == 12 then {
            print "CTS";
          } else { 
            if type == 1 && subtype == 13 then {
              print "ACK";
            } else { 
              if type == 1 && subtype == 14 then {
                print "CF-end";
              } else { 
                if type == 1 && subtype == 15 then {
                  print "CF-end + ACK";
                } else {
                  print "To be done";
                }
              }
            }
          }
        }
      }
    }
  }
}


fun parseMACHeader(hdr : arr bit) {
var a : arr[6] int8;
var type : int8;
var subtype : int8;

  -- Extract type and subtype
  bits_to_int8(a[0,1], hdr[2,2]);
  type := a[0];
  bits_to_int8(a[0,1], hdr[4,4]);
  subtype := a[0];


  println "===== MAC HEADER (len = ", length(hdr), " bits)";

  println "*** Frame control: ";
  println "  Protocol:       ", hdr[1], hdr[0];
  print   "  Type:           ", hdr[2,2], "   - ";

  if type == 0 then {
    print "Mgmt";
  } else {
    if type == 1 then {
      print "Ctrl";
    } else {
      if type == 2 then {
        print "Data";
      } else {
        print "Rsvd";
      }
    }
  }
  println "";

  print "  Subtype:        ", hdr[7], hdr[6], hdr[5], hdr[4], " - ";
  printMACHeaderType(type, subtype);
  println "";

  println "  To DS:          ", hdr[8];
  println "  From DS:        ", hdr[9];
  println "  More fragments: ", hdr[10];
  println "  Retry:          ", hdr[11];
  println "  Power Mgmt:     ", hdr[12];
  println "  More data:      ", hdr[13];
  println "  WEP:            ", hdr[14];
  println "  Order:          ", hdr[15];
  println "";

  bits_to_int8(a[0,2], hdr[16,16]);
  println "Duration: ", int16(a[0]) + 256*int16(a[1]);

  if (length(hdr) >= 32+6*8) then {
    bits_to_int8(a[0,6], hdr[32,6*8]);
    print "Addr 1: ", 
    hexprint_int8(a, 6);
    println "";
  } 

  if (length(hdr) >= 32+2*6*8) then {
    bits_to_int8(a[0,6], hdr[32+6*8,6*8]);
    print "Addr 2: ", 
    hexprint_int8(a, 6);
    println "";
  }
  if (length(hdr) >= 32+3*6*8) then {
    bits_to_int8(a[0,6], hdr[32+12*8,6*8]);
    print "Addr 3: ", 
    hexprint_int8(a, 6);
    println "";
  }
  if (length(hdr) >= 32+20*8) then {
    bits_to_int8(a[0,2], hdr[32+18*8,16]);
    println "Seq ctl: ", int16(a[0]) + 256*int16(a[1]);
  } 
  println "";

}
