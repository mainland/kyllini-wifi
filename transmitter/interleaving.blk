-- 
-- Copyright (c) Microsoft Corporation
-- All rights reserved. 
--
-- Licensed under the Apache License, Version 2.0 (the ""License""); you
-- may not use this file except in compliance with the License. You may
-- obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
-- LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR
-- A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
--
-- See the Apache Version 2.0 License for specific language governing
-- permissions and limitations under the License.
--
--
#pragma once 

#include "../const.blk"
#include <permutation.blk>


-- number of encoded bits per subcarrier
fun nBPSC(mod: int) {
  if mod == M_BPSK then { return 1 } else { 
  if mod == M_QPSK then { return 2 } else {
  if mod == M_16QAM then { return 4 } else {
  if mod == M_64QAM then { return 6 } else { return -1 }
  }}}
}

fun nCBPS(mod: int) { return nBPSC(mod) * 48 } 


fun fuse_perm(p1 : arr int, p2 : arr[length(p1)] int) {
    var p3 : arr[length(p1)] int;
    nounroll for i in [0,length(p1)] {
       p3[i] := p2[p1[i]];
    }
    return p3;
}


fun intlv_perm1(mod : int) {
  var perm : arr[288] int;
  for k in [0,288] {
    perm[k] := nCBPS(mod)/16 * (k%16) + k/16
  }; 
  return perm
}

fun intlv_perm2(mod: int) {
  var perm: arr[288] int; 
  let s = if (mod == M_BPSK) then 1 else nBPSC(mod)/2  

  for k in [0,288] {
    perm[k] := s * (k/s) + (k+nCBPS(mod) - (16*k)/nCBPS(mod)) % s
  };
  return perm
}

fun comp interleaver_bpsk() {
  var y : arr[48] bit; 
  let nCBPSMod = 48 in 
  let ids1 = intlv_perm1(M_BPSK) in 
  let ids2 = intlv_perm2(M_BPSK) in
  let ids3 = fuse_perm(ids1,ids2) in

  repeat <= [48,48] {
    (x : arr[48] bit) <- takes 48;

    emits perm(ids3[0,48], x);
  }
}

fun comp interleaver_qpsk() {
  var y : arr[2*48] bit; 
  let nCBPSMod = 2*48 in 
  let ids1 = intlv_perm1(M_QPSK)  in 
  let ids2 = intlv_perm2(M_QPSK)  in
  let ids3 = fuse_perm(ids1,ids2) in
  
  repeat <= [96,96] {
    (x : arr[96] bit) <- takes 96;
    emits perm(ids3[0,96], x);
  }
}

fun comp interleaver_m16qam() {
  var y : arr[4*48] bit; 
  let nCBPSMod = 4*48 in
  let ids1 = intlv_perm1(M_16QAM) in
  let ids2 = intlv_perm2(M_16QAM) in
  let ids3 = fuse_perm(ids1,ids2) in
  
  repeat <= [192, 192] {
    (x : arr[192] bit) <- takes 192;
    emits perm(ids3[0,192], x);
  }
}

fun comp interleaver_m64qam() {
  var y : arr[6*48] bit; 
  let nCBPSMod = 6*48 in 
  let ids1 = intlv_perm1(M_64QAM) in 
  let ids2 = intlv_perm2(M_64QAM) in
  let ids3 = fuse_perm(ids1,ids2) in

  repeat <= [288, 288]{
    (x : arr[288] bit) <- takes 288;
    emits perm(ids3[0,288], x);
  }
}

fun comp interleaver(mod: int) {
  if (mod == M_BPSK) then {
     interleaver_bpsk()
  } else { 
      if (mod == M_QPSK) then { 
          interleaver_qpsk()
      } else {  
          if (mod == M_16QAM) then {
             interleaver_m16qam()
          } else { interleaver_m64qam() }
      }
  }
}

