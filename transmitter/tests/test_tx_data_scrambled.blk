-- 
-- Copyright (c) Microsoft Corporation
-- All rights reserved. 
--
-- Licensed under the Apache License, Version 2.0 (the ""License""); you
-- may not use this file except in compliance with the License. You may
-- obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
-- LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR
-- A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
--
-- See the Apache Version 2.0 License for specific language governing
-- permissions and limitations under the License.
--
--

-- Test created using Annex G, IEEE Standard_802.11a-1999

#include <bits.blk>
#include "../parsePLCPHeader.blk"
#include "../scramble.blk"
#include "../crc.blk"

let h = HeaderInfo{coding=CR_34; modulation=M_16QAM; len=100; err=false};

fun comp scale() {
  repeat {
    (x:complex16)<-take;
    emit complex16{re=x.re/bpsk_mod_11a; im=x.im/bpsk_mod_11a};
  }
}

fun comp convert_to_bits() {
var ai : arr[1] int8;
var ab : arr[8] bit;

  repeat {
    x<-take;
    do{
      ai[0] := x;
      int8_to_bits(ab, ai);
    }
    emits ab;
  }
}

let len_without_crc = 100-4;

-- Note that 802.11a-1999, Annex G has an error in the scrambling output
-- Hence we recreate the test using our own code, which seems correct
-- (http://standards.ieee.org/findstds/interps/802.11a-interp.pdf)
let comp main = read[int8] >>> convert_to_bits() >>>
  crc144(len_without_crc, true) >>> scrambler(default_scrmbl_st)
  >>> repeat{x<-takes 864; emits x[0, 144]; emits x[720, 144]}
  >>> write


