-- 
-- Copyright (c) Microsoft Corporation
-- All rights reserved. 
--
-- Licensed under the Apache License, Version 2.0 (the ""License""); you
-- may not use this file except in compliance with the License. You may
-- obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
-- LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR
-- A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
--
-- See the Apache Version 2.0 License for specific language governing
-- permissions and limitations under the License.
--
--
#pragma once 

#include "../const.blk"

fun comp encode34() {
 var s:arr[6] bit := {'0, '0, '0, '0, '0, '0};
 var x:bit;
 var oA:bit;
 var oB:bit;
 

 fun enc_state_machine(b:bit) {
   var r:arr[2] bit;
   r[0] := b ^ s[1] ^ s[2] ^ s[4] ^ s[5];
   r[1] := b ^ s[0] ^ s[1] ^ s[2] ^ s[5];
       
   s[1:5] := s[0:4];
   s[0] := b;
   return r
 } in 
   
-- This is too big for LUTter as we take three times
-- and it gets inlined
-- repeat [12,8] seq{
repeat [6,8] seq{
   dvm1 <- take;
   dvm2 <- take;
   dvm3 <- take;

   emits(enc_state_machine(dvm1));

   let r2 = enc_state_machine(dvm2) in 
   emit (r2[0]);
   let r3 = enc_state_machine(dvm3) in
   emit (r3[1])
 }
}


fun comp encode23() {
 var s:arr[6] bit := {'0, '0, '0, '0, '0, '0};
 var x:bit;
 var oA:bit;
 var oB:bit;
 
 fun enc_state_machine(b:bit) {
   var r:arr[2] bit;
   r[0] := b ^ s[1] ^ s[2] ^ s[4] ^ s[5];
    r[1] := b ^ s[0] ^ s[1] ^ s[2] ^ s[5];
       
   s[1:5] := s[0:4];
   s[0] := b;
   return r
 } in 

-- This is too big for LUTter as we take twice
-- and it gets inlined, so this becomes [16,24]
-- repeat [8,12] seq{
 repeat [8,12] seq{
   dvm1 <- take;
   dvm2 <- take;

   emits (enc_state_machine(dvm1));

   let r2 = enc_state_machine(dvm2) in 
   emit r2[0]

 }


}

fun comp encode12() {
 var s:arr[6] bit := {'0, '0, '0, '0, '0, '0};
 var x:bit;
 var oA:bit;
 var oB:bit;
 
 fun enc_state_machine(b:bit) { 
   var r:arr[2] bit;
   r[0] := b ^ s[1] ^ s[2] ^ s[4] ^ s[5];
   r[1] := b ^ s[0] ^ s[1] ^ s[2] ^ s[5];
       
   s[1:5] := s[0:4];
   s[0] := b;
   return r
 } in 

 repeat <= [8,16] seq {
   dvm1 <- take;
   emits (enc_state_machine(dvm1))
 }
}





fun comp encode(coding: int) {
 if coding == CR_34 then
   encode34()
 else 
   if coding == CR_23 then
      encode23()
   else 
     if coding == CR_12 then
      encode12()
     else
       repeat do{error "Unknown coding rate!"}
}

