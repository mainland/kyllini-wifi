-- 
-- Copyright (c) Microsoft Corporation
-- All rights reserved. 
--
-- Licensed under the Apache License, Version 2.0 (the ""License""); you
-- may not use this file except in compliance with the License. You may
-- obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
-- LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR
-- A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
--
-- See the Apache Version 2.0 License for specific language governing
-- permissions and limitations under the License.
--
--
#pragma once 

#include <externals.blk>

fun perm8(p : arr[8] int, iarr : arr[8] bit, var oarr : arr bit) {
  var set : bool; 
  for j in [0,length(oarr)] {
    set := false;
    for i in [0,8] {
       if j == p[i] then {
           oarr[j] := iarr[i]; 
           set := true;
       }
    };
    if (not set) then { oarr[j] := '0; };
  }
}

-- Older version that did not write to the entirety of oarr, although
-- the LUTter thought it did.
-- let perm8(p : arr[8] int, iarr : arr[8] bit, oarr : arr bit) = 
--   for j in [0,length(oarr)] {
--     for i in [0,8] {
--        if j == p[i] then { 
--            oarr[j] := iarr[i]; 
--        }
--     }
--   }
-- in

fun perm(p : arr int, iarr : arr bit) {
  var oarr    : arr[length(p)] bit;
  var iarr1 : arr[8] bit;
  var oarrtmp : arr[length(p)] bit;
  zero_bit(oarr);
  zero_bit(oarrtmp);


  unroll for j in [0,length(p)/8] {
     let p1 = p[j*8,8];
     iarr1 := iarr[j*8,8];
     perm8(p1,iarr1,oarrtmp)
     oarr := v_or(oarr,oarrtmp);
  }

  return oarr;
}


fun perm8_288(p : arr[8] int, iarr : arr[8] bit) {
  var oarr : arr[288] bit;
  var set : bool; 
  for j in [0,length(oarr)] {
    set := false;
    for i in [0,8] {
       if j == p[i] then {
           oarr[j] := iarr[i]; 
           set := true;
       }
    };
    if (not set) then { oarr[j] := '0; };
  }
  return oarr;
}

fun perm_288(p : arr[288] int, iarr : arr[288] bit) {
  var oarr    : arr[length(p)] bit;
  var iarr1 : arr[8] bit;
  zero_bit(oarr);


  unroll for j in [0,length(p)/8] {
     let p1 = p[j*8,8];
     iarr1 := iarr[j*8,8];
     oarr := v_or(oarr,perm8_288(p1,iarr1));
  }

  return oarr;
}


fun perm8_192(p : arr[8] int, iarr : arr[8] bit) {
  var oarr : arr[192] bit;
  var set : bool; 
  for j in [0,length(oarr)] {
    set := false;
    for i in [0,8] {
       if j == p[i] then {
           oarr[j] := iarr[i]; 
           set := true;
       }
    };
    if (not set) then { oarr[j] := '0; };
  }
  return oarr;
}

fun perm_192(p : arr[192] int, iarr : arr[192] bit) {
  var oarr    : arr[length(p)] bit;
  var iarr1 : arr[8] bit;
  zero_bit(oarr);


  unroll for j in [0,length(p)/8] {
     let p1 = p[j*8,8];
     iarr1 := iarr[j*8,8];
     oarr := v_or(oarr,perm8_192(p1,iarr1));
  }

  return oarr;
}



