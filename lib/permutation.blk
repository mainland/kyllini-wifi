-- 
-- Copyright (c) Microsoft Corporation
-- All rights reserved. 
--
-- Licensed under the Apache License, Version 2.0 (the ""License""); you
-- may not use this file except in compliance with the License. You may
-- obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
-- LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR
-- A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
--
-- See the Apache Version 2.0 License for specific language governing
-- permissions and limitations under the License.
--
--
#pragma once 

#include <externals.blk>

fun perm8(p : arr[8] int, iarr : arr[8] bit, var oarr : arr bit) {
  for i in [0,8] {
    oarr[p[i]] := iarr[i]
  }
}

fun perm_orig(p : arr int, iarr : arr bit) {
  var oarr    : arr[length(p)] bit;
  var oarrtmp : arr[length(p)] bit;
  zero_bit(oarr);

  unroll for j in [0,length(p)/8] {
     let p1 = p[j*8,8];
     perm8(p1,iarr[j*8,8],oarr)
  }

  return oarr;
}

-- A different implementation that is slower in non LUT code, but
-- faster in LUT code.

fun perm8_full(p : arr[8] int, iarr : arr[8] bit, var oarr : arr bit) {
  for j in [0,length(oarr)] { -- For each output bit
    oarr[j] := '0;
    for i in [0,8] { 
      -- if it corresponds to a permutation 
      if (j == p[i]) then { oarr[j] := iarr[i]; }
    };
  }
}

fun perm(p : arr int, iarr : arr bit) {
  var oarr    : arr[length(p)] bit;
  var oarrtmp : arr[length(p)] bit;

  zero_bit(oarr);

  unroll for j in [0,length(p)/8] {
     let p1 = p[j*8,8];
     var oarrtmp : arr[length(p)] bit
     perm8_full(p1,iarr[j*8,8],oarrtmp)
     oarr := v_or(oarr,oarrtmp);
  }

  return oarr;
}




